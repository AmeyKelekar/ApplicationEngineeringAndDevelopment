/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MobileMoneyTransfer.VendorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.GiveDirectlyEnterprise;
import Business.Network.Network;
import Business.Organization.GiveDirectly.RecepientOrganization;
import Business.Organization.MobileMoneyTransfer.VendorOrganization;
import Business.Organization.Organization;
import Business.Person.Recepient;
import Business.Person.Vendor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ProvideMoneyWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amey
 */
public class ProvideMoneyJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private VendorOrganization vendorOrganization;
    private Enterprise enterprise;
    private EcoSystem system;
    /**
     * Creates new form ProvideMoneyJPanel
     */
    public ProvideMoneyJPanel(JPanel userJPanel, Enterprise enterprise, 
        VendorOrganization organization,UserAccount account,EcoSystem ecoSystem) 
    {
        initComponents();
        this.userProcessContainer = userJPanel;
        this.enterprise = enterprise;
        this.vendorOrganization = organization;
        this.userAccount = account;
        this.system = ecoSystem;
        populateTable();
    }
    
    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)requestJTable.getModel();
        model.setRowCount(0);
        
            for(Organization organization:
                enterprise.getOrganizationDirectory().getOrganizationList()){
            if(organization instanceof VendorOrganization){
                for(WorkRequest request : 
                        organization.getWorkQueue().getWorkRequestList())
                {
                    Object[] row = new Object[4];
                    row[0] = request;
                    row[1] = request.getSender().getPerson().getFirstName();
                    row[2] = request.getReceiver() == null ? null : 
                            request.getReceiver().getPerson().getFirstName();
                    row[3] = request.getStatus();
                    model.addRow(row);
                }
            }    
        }           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        provideMoneyJLabel = new javax.swing.JLabel();
        assignJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        provideMoneyJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        provideMoneyJLabel.setText("Provide Money Request");

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestJTable);

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(provideMoneyJLabel)
                        .addGap(337, 337, 337))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(195, 195, 195))))
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(assignJButton)
                .addGap(79, 79, 79)
                .addComponent(submitJButton)
                .addGap(88, 88, 88)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(provideMoneyJLabel)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(submitJButton)
                    .addComponent(backJButton))
                .addGap(274, 274, 274))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, 
                "Please select a row to assign!!!");
            return;
        }
        WorkRequest request = 
            (WorkRequest)requestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, 
                "Please select a row to submit!!!!");
            return;
        }
        Object object = requestJTable.getValueAt(selectedRow,2);
        if(object == null){
            JOptionPane.showMessageDialog(null, 
                "The request is not yet assigned!!!");
            return;
        }
        Vendor vendor = (Vendor)userAccount.getPerson();
        String id = vendor.getVendorId();
        System.out.println("Vendor id is: "+id);
        ProvideMoneyWorkRequest request = 
            (ProvideMoneyWorkRequest)requestJTable.getValueAt(selectedRow, 0);
        for(Network network:system.getNetworkList()){
            for(Enterprise ent:
                    network.getEnterpriseDirectory().getEnterpriseList())
            {
                if(ent instanceof GiveDirectlyEnterprise){
                    System.out.println("Enterprise is: "+ent);
                    for(Organization organization:
                        ent.getOrganizationDirectory().getOrganizationList())
                    {
                        if(organization instanceof RecepientOrganization){
                            System.out.println("Organization is: "+organization);
                            for(UserAccount account:organization.
                                getUserAccountDirectory().getUserAccountList())
                            {
                                System.out.println("Request UserName is: "
                                        +request.getSender().getUsername());
                                System.out.println("Account UserName is: "
                                        +account.getUsername());
                                if(request.getSender().getUsername().
                                        equals(account.getUsername()))
                                {
                                    float amount = 
                                        Float.parseFloat(request.getMessage());
                                    System.out.println(amount);
                                    Recepient recepient = 
                                        (Recepient)account.getPerson();
                                    float balance = 
                                        recepient.getAccountBalance();
                                    recepient.setAccountBalance
                                        (balance - amount);
                                    recepient.setVendorId(id);
                                    float consumedBalanace = 
                                        recepient.getAmountConsumed();
                                    recepient.setAmountConsumed
                                        (amount+consumedBalanace);                                
                                    System.out.println(balance-amount);
                                    request.setStatus("Completed");
                                    request.setProvideFunds("Approved");
                                }
                            }
                        }
                    }
                }
            }
        }
        populateTable();
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel provideMoneyJLabel;
    private javax.swing.JTable requestJTable;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
