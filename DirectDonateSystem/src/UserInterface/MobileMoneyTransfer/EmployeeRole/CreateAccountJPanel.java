/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MobileMoneyTransfer.EmployeeRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MobileMoneyTransferEnterprise;
import Business.MobileMoneyTransfer.MobileMoneyTransferAccount;
import Business.Network.Network;
import Business.Organization.GiveDirectly.RecepientOrganization;
import Business.Organization.MobileMoneyTransfer.
        MobileMoneyTransferEmployeeOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Person.Recepient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MakeAccountWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amey
 */
public class CreateAccountJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private MobileMoneyTransferEnterprise mobileMoneyTransferEnterprise;
    private EcoSystem system;
    /**
     * Creates new form CreateAccountJPanel
     */
    public CreateAccountJPanel(JPanel userJPanel,MobileMoneyTransferEnterprise 
            enterprise,UserAccount account,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userJPanel;
        this.userAccount = account;
        this.mobileMoneyTransferEnterprise = enterprise;
        this.system = system;
        populateTable();
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)requestJTable.getModel();
        model.setRowCount(0);
        
            for(Organization mobileMoneyTransferEmployeeOrganization:
                mobileMoneyTransferEnterprise.getOrganizationDirectory().
                        getOrganizationList())
            {
                if(mobileMoneyTransferEmployeeOrganization instanceof 
                    MobileMoneyTransferEmployeeOrganization)
                {
                    for(WorkRequest request:
                        mobileMoneyTransferEmployeeOrganization.getWorkQueue().
                                getWorkRequestList())
                    {
                        Object[] row = new Object[4];
                        row[0] = request;
                        row[1] = request.getSender().getPerson().getFirstName();
                        row[2] = request.getReceiver() == null ? null : 
                            request.getReceiver().getPerson().getFirstName();
                        row[3] = request.getStatus();
                        model.addRow(row);
                }
            }    
        }           
    }
    
    public void populateRecepientData(){
        DefaultTableModel model = 
                (DefaultTableModel)populateRecepientDataJTable.getModel();
        model.setRowCount(0);

        for(Network network:system.getNetworkList()){
            for(Enterprise enterprise:
                    network.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization recepientOrganization:
                enterprise.getOrganizationDirectory().getOrganizationList())
                {
                    if(recepientOrganization instanceof RecepientOrganization){
                        for(Person person:recepientOrganization.
                                getPersonDirectory().getPersonList()){
                            Recepient recepient = (Recepient)person;
                            if(recepient.isApproved()){
                                Object object[] = new Object[6];
                                object[0] = recepient;
                                object[1] = recepient.getLastName();
                                object[2] = recepient.getNationalId();
                                object[3] = recepient.getRecipientId();
                                object[4] = recepient.getPhoneNumber();
                                object[5] = recepient.getAccountNumber();
                                model.addRow(object);
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createAccountJLabel = new javax.swing.JLabel();
        assignJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        submitJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        populateRecepientDataJTable = new javax.swing.JTable();
        createNewAccountJButton = new javax.swing.JButton();
        createAccountJButton = new javax.swing.JButton();

        createAccountJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        createAccountJLabel.setText("Create Recepient Account");

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestJTable);

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        populateRecepientDataJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "National ID", "Recepient ID", "Phone Number", "Account Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(populateRecepientDataJTable);

        createNewAccountJButton.setText("Create New Mobile Transfer Account");
        createNewAccountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewAccountJButtonActionPerformed(evt);
            }
        });

        createAccountJButton.setText("Create Account");
        createAccountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(333, 333, 333)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(createAccountJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(39, 39, 39)
                                .addComponent(submitJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createNewAccountJButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 358, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(393, 393, 393)
                        .addComponent(createAccountJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 851, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createAccountJLabel)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(submitJButton)
                    .addComponent(createNewAccountJButton))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(createAccountJButton))
                .addContainerGap(278, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, 
                    "Please select a row to assign!!!");
            return;
        }
        WorkRequest request = 
                (WorkRequest)requestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, 
                "Please select a row to submit!!!!");
            return;
        }

        Object object = requestJTable.getValueAt(selectedRow,2);
        if(object == null){
            JOptionPane.showMessageDialog(null, 
                "The request is not yet assigned!!!");
            return;
        }
        
        MakeAccountWorkRequest request = 
            (MakeAccountWorkRequest)requestJTable.getValueAt(selectedRow, 0);
        request.setStatus("Completed");
        request.setResult("Approved");
        request.setResolveDate(new Date());
        populateTable();
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void createNewAccountJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewAccountJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if(selectedRow < 0 )
        {
            JOptionPane.showMessageDialog(null, 
                "Please select a row to view data!!!");
            return;
        }
        if(requestJTable.getValueAt(selectedRow,3).equals("Sent")){
            JOptionPane.showMessageDialog(null, 
                "Request is not yet assigned!!!");
            return;
        }
        if(requestJTable.getValueAt(selectedRow,3).equals("Pending")){
            JOptionPane.showMessageDialog(null, 
                "Request is not yet approved!!!");
            return;
        }
        populateRecepientData();
    }//GEN-LAST:event_createNewAccountJButtonActionPerformed

    private void createAccountJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = populateRecepientDataJTable.getSelectedRow();
        if (selectedRow < 0){ 
            JOptionPane.showMessageDialog(null,
            "Please select a Rrecipient to create his mobile transfer account");
            return;
        }
        Recepient recepient = 
            (Recepient)populateRecepientDataJTable.getValueAt(selectedRow, 0);
        for(Organization mobileMoneyTransferEmployeeOrganization:
                mobileMoneyTransferEnterprise.getOrganizationDirectory().
                        getOrganizationList())
        {
            if(mobileMoneyTransferEmployeeOrganization instanceof 
                    MobileMoneyTransferEmployeeOrganization)
            {
                MobileMoneyTransferEmployeeOrganization organization = 
                        (MobileMoneyTransferEmployeeOrganization)
                        mobileMoneyTransferEmployeeOrganization;
                MobileMoneyTransferAccount mobileMoneyTransferAccount = 
                        organization.getMobileMoneyTransferAccountList().
                                addMobileMoneyTransferAccount(recepient);
                recepient.setAccountNumber
                        (mobileMoneyTransferAccount.getAccountNumber());
                recepient.setMoneyTransferAccount(true);
                populateRecepientData();
            }
        }
    }//GEN-LAST:event_createAccountJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createAccountJButton;
    private javax.swing.JLabel createAccountJLabel;
    private javax.swing.JButton createNewAccountJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable populateRecepientDataJTable;
    private javax.swing.JTable requestJTable;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
