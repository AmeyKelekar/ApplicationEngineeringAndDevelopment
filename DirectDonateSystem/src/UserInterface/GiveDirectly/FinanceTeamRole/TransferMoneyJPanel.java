/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.GiveDirectly.FinanceTeamRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.GiveDirectlyEnterprise;
import Business.Enterprise.MobileMoneyTransferEnterprise;
import Business.GiveDirectly.FinanceAccount;
import Business.GiveDirectly.FinanceTransaction;
import Business.MobileMoneyTransfer.MobileMoneyTransferTransaction;
import Business.Network.Network;
import Business.Organization.GiveDirectly.RecepientOrganization;
import Business.Organization.MobileMoneyTransfer.MobileMoneyTransferEmployeeOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Person.Recepient;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amey
 */
public class TransferMoneyJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Organization organization;
    private EcoSystem system;
    /**
     * Creates new form TransferMoneyJPanel
     */
    public TransferMoneyJPanel(JPanel userJPanel, Enterprise enterprise, 
            Organization organization,UserAccount account,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userJPanel;
        this.enterprise = enterprise;
        this.organization = organization;
        this.userAccount = account;
        this.system = system;
        populateTransferAmountTable();
    }

    private void populateTransferAmountTable(){
        DefaultTableModel model = (DefaultTableModel)transferMoneyJTable.getModel();
        model.setRowCount(0);
        
        for(Network network:system.getNetworkList()){
            for(Enterprise giveDirectlyEnterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                if(giveDirectlyEnterprise instanceof GiveDirectlyEnterprise){
                    for(Organization recepientOrganization:giveDirectlyEnterprise.getOrganizationDirectory().getOrganizationList()){
                        if(recepientOrganization instanceof RecepientOrganization){
                            for(Person person:recepientOrganization.getPersonDirectory().getPersonList()){
                                Recepient recepient = (Recepient)person;
                                if(recepient.isMoneyTransferAccount()){
                                    Object object[] = new Object[7];
                                    object[0] = recepient;
                                    object[1] = recepient.getLastName();
                                    object[2] = recepient.getNationalId();
                                    object[3] = recepient.getPhoneNumber();
                                    object[4] = recepient.getRecipientId();
                                    object[5] = recepient.getAccountNumber();
                                    object[6] = recepient.getAccountBalance();
                                    model.addRow(object);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transferMoneyJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transferMoneyJTable = new javax.swing.JTable();
        nationalIdJLabel = new javax.swing.JLabel();
        phoneNumberJLabel = new javax.swing.JLabel();
        amountJLabel = new javax.swing.JLabel();
        nationalIdJTextField = new javax.swing.JTextField();
        phoneNumberJTextField = new javax.swing.JTextField();
        amountJTextField = new javax.swing.JTextField();
        transferAmountJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        recepientIdJLabel = new javax.swing.JLabel();
        recepientIdJTextField = new javax.swing.JTextField();
        recepientNameJLabel = new javax.swing.JLabel();
        recepientNameJTextField = new javax.swing.JTextField();
        lastNameJLabel = new javax.swing.JLabel();
        lastNameJTextField = new javax.swing.JTextField();
        accountNumberJLabel = new javax.swing.JLabel();
        accountNumberJTextField = new javax.swing.JTextField();
        selectRecepientJButton = new javax.swing.JButton();

        transferMoneyJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        transferMoneyJLabel.setText("Transfer Money to Recepient");

        transferMoneyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recepient Name", "Last Name", "National ID", "Phone Number", "Recepient ID", "Account Number", "Amount to be transfered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(transferMoneyJTable);

        nationalIdJLabel.setText("National ID");

        phoneNumberJLabel.setText("Phone Number");

        amountJLabel.setText("Amount to be transferred");

        nationalIdJTextField.setEditable(false);

        phoneNumberJTextField.setEditable(false);

        amountJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                amountJTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountJTextFieldKeyTyped(evt);
            }
        });

        transferAmountJButton.setText("Transfer");
        transferAmountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferAmountJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        recepientIdJLabel.setText("Recepient ID");

        recepientIdJTextField.setEditable(false);

        recepientNameJLabel.setText("Recepient Name");

        recepientNameJTextField.setEditable(false);
        recepientNameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recepientNameJTextFieldActionPerformed(evt);
            }
        });

        lastNameJLabel.setText("Last Name");

        lastNameJTextField.setEditable(false);

        accountNumberJLabel.setText("Account Number");

        accountNumberJTextField.setEditable(false);

        selectRecepientJButton.setText("Select Recepient");
        selectRecepientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecepientJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(transferMoneyJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nationalIdJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(amountJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(recepientNameJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lastNameJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(phoneNumberJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(accountNumberJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(recepientIdJLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(238, 238, 238))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(232, 232, 232)
                                .addComponent(backJButton)
                                .addGap(66, 66, 66)
                                .addComponent(selectRecepientJButton)
                                .addGap(61, 61, 61)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transferAmountJButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(phoneNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(recepientNameJTextField)
                                    .addComponent(lastNameJTextField)
                                    .addComponent(nationalIdJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addComponent(recepientIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(amountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accountNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(243, 243, 243)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(transferMoneyJLabel)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recepientNameJLabel)
                    .addComponent(recepientNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameJLabel)
                    .addComponent(lastNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nationalIdJLabel)
                    .addComponent(nationalIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(phoneNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneNumberJLabel))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recepientIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recepientIdJLabel))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(accountNumberJLabel)
                    .addComponent(accountNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(amountJLabel)
                    .addComponent(amountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(transferAmountJButton)
                    .addComponent(selectRecepientJButton))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void recepientNameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recepientNameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recepientNameJTextFieldActionPerformed

    private void selectRecepientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRecepientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = transferMoneyJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a recepient to transfer funds");
            return;
        }
        Recepient recepient = (Recepient)transferMoneyJTable.getValueAt(selectedRow, 0);
        recepientNameJTextField.setText(recepient.getFirstName());
        lastNameJTextField.setText(recepient.getNationalId());
        nationalIdJTextField.setText(recepient.getNationalId());
        phoneNumberJTextField.setText(String.valueOf(recepient.getPhoneNumber()));
        recepientIdJTextField.setText(recepient.getRecipientId());
        accountNumberJTextField.setText(recepient.getAccountNumber());
    }//GEN-LAST:event_selectRecepientJButtonActionPerformed

    private void transferAmountJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferAmountJButtonActionPerformed
        // TODO add your handling code here:
        try{
            int selectedRow = transferMoneyJTable.getSelectedRow();
            if (selectedRow < 0){ 
                JOptionPane.showMessageDialog(null,"Please select a recepient to transfer funds");
                return;
            }
            if (amountJTextField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter the amount!!!");
                amountJTextField.setText("");
                amountJTextField.requestFocus();
                return;
            }
            
            if(!(Float.parseFloat(amountJTextField.getText().trim()) == 1000)){
                JOptionPane.showMessageDialog(null, 
                        "You have to transfer exactly $1000 as per policy!!!");
                amountJTextField.setText("");
                amountJTextField.requestFocus();
                return;
            }

            FinanceAccount financeAccount = FinanceAccount.getInstance();
            double amount = 0.0;

            for(FinanceTransaction financeTransaction : financeAccount.getFinanceTransactionDirectory().getFinanceTransactionList())
            {
                amount+= financeTransaction.getAmount();
            }
            System.out.println("Total funds available are: "+ (amount -financeAccount.getAmountConsumed()));
            if((amount -financeAccount.getAmountConsumed())< Float.parseFloat(amountJTextField.getText())){
                JOptionPane.showMessageDialog(null, "Amount exceeds the limit.Please check!!!");
                amountJTextField.setText("");
                amountJTextField.requestFocus();
                return;
            }
            Recepient recepient = (Recepient)transferMoneyJTable.getValueAt(selectedRow, 0);
            float sum = recepient.getAccountBalance();
            recepient.setAccountBalance(Float.parseFloat(amountJTextField.getText()));
            for(Network network:system.getNetworkList()){
                for(Enterprise mobileMoneyTransferEnterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                    if(mobileMoneyTransferEnterprise instanceof MobileMoneyTransferEnterprise){
                        for(Organization org:
                                mobileMoneyTransferEnterprise.getOrganizationDirectory().getOrganizationList()){
                            if(org instanceof MobileMoneyTransferEmployeeOrganization ){
                                MobileMoneyTransferEmployeeOrganization mobileMoneyTransferEmployeeOrganization = 
                                        (MobileMoneyTransferEmployeeOrganization)org;

                                MobileMoneyTransferTransaction mobileMoneyTransferTransaction = 
                                        mobileMoneyTransferEmployeeOrganization.getMobileMoneyTransferTransactionList().addMobileMoneyTransferTransaction();
                                String tranAmount = amountJTextField.getText();
                                recepient.setAccountBalance(Float.parseFloat(tranAmount) + sum);
                                recepient.setAmountRecevied(Float.parseFloat(tranAmount));
                                mobileMoneyTransferTransaction.setRecepient(recepient);
                                mobileMoneyTransferTransaction.setSender("GiveDirectly");
                                mobileMoneyTransferTransaction.setTransactionId(mobileMoneyTransferTransaction.getTransactionId());
                                mobileMoneyTransferTransaction.setTransferAmount(Float.parseFloat(tranAmount));
    //                            FinanceAccount financeAccount = FinanceAccount.getInstance();
                                float newSum = financeAccount.getBalanceAmount();
                                financeAccount.setBalanceAmount(newSum-Float.parseFloat(tranAmount));
                                financeAccount.setAmountConsumed(Float.parseFloat(tranAmount));
                                populateTransferAmountTable();
                            }
                        }
                    }
                }
            }
            recepientNameJTextField.setText("");
            lastNameJTextField.setText("");
            nationalIdJTextField.setText("");
            phoneNumberJTextField.setText("");
            recepientIdJTextField.setText("");
            accountNumberJTextField.setText("");
            amountJTextField.setText("");
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,
                "Please insert valid number value!!!");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,
                "There's some error with database,please try again later!!");
        }
    }//GEN-LAST:event_transferAmountJButtonActionPerformed

    private void amountJTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountJTextFieldKeyTyped
        // TODO add your handling code here:
        char character = evt.getKeyChar();
        if(!(Character.isDigit(character) || character == KeyEvent.VK_BACK_SPACE || character == KeyEvent.VK_DELETE)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_amountJTextFieldKeyTyped

    private void amountJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountJTextFieldKeyPressed
        // TODO add your handling code here:
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_C) {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "You cannot copy code from this field!!!");
        } 
        else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_X) {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "You cannot cut code from this field!!!");
        } 
        else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V) {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "You cannot paste code into this field!!!");
        }
    }//GEN-LAST:event_amountJTextFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountNumberJLabel;
    private javax.swing.JTextField accountNumberJTextField;
    private javax.swing.JLabel amountJLabel;
    private javax.swing.JTextField amountJTextField;
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastNameJLabel;
    private javax.swing.JTextField lastNameJTextField;
    private javax.swing.JLabel nationalIdJLabel;
    private javax.swing.JTextField nationalIdJTextField;
    private javax.swing.JLabel phoneNumberJLabel;
    private javax.swing.JTextField phoneNumberJTextField;
    private javax.swing.JLabel recepientIdJLabel;
    private javax.swing.JTextField recepientIdJTextField;
    private javax.swing.JLabel recepientNameJLabel;
    private javax.swing.JTextField recepientNameJTextField;
    private javax.swing.JButton selectRecepientJButton;
    private javax.swing.JButton transferAmountJButton;
    private javax.swing.JLabel transferMoneyJLabel;
    private javax.swing.JTable transferMoneyJTable;
    // End of variables declaration//GEN-END:variables
}
